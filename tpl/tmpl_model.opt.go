package tpl

const (
	ModelOptHeader = `// Code generated by gormgen. DO NOT EDIT.
package %s

import (
	"gorm.io/gorm"
)
`
)

var (
	ModelOptTemplate = `
const (
{{.StructName.UpperS}}TableName = "{{.TableName}}"
{{range $item := .Columns}}
    {{$.StructName.LowerS}}Field{{$item.FieldName}} = "{{$item.GormName}}" {{end}}
)

// Holds all SQL columns for {{$.StructName.LowerS}} fields.
var {{$.StructName.LowerS}}FieldAll = []string{ {{range $item := .Columns}}
    {{$.StructName.LowerS}}Field{{$item.FieldName}}, {{end}}
}

// Kernel struct for table operation
type {{.StructName.UpperS}}Option struct {
	selects []string
	orders  []string
	wheres  []struct {
		prefix string
		values []interface{}
	}
	page *struct {
		pageNum  int
		pageSize int
	}
}

func New{{.StructName.UpperS}}Option() *{{.StructName.UpperS}}Option{
    return &{{.StructName.UpperS}}Option{}
}

func (opt *{{.StructName.UpperS}}Option) BuildQuery(db *gorm.DB) *gorm.DB {
	if opt.selects != nil {
		db = db.Select(opt.selects)
	}
	for _, v := range opt.orders {
		db = db.Order(v)
	}
	for _, q := range opt.wheres {
		db = db.Where(q.prefix, q.values...)
	}
	return db
}

func (opt *{{.StructName.UpperS}}Option) BuildPage(db *gorm.DB) *gorm.DB {
	if p := opt.page; p != nil {
		if p.pageNum <= 0 {
			p.pageNum = 1
		}
		db = db.Limit(p.pageSize).Offset((p.pageNum - 1) * p.pageSize)
	}
	return db
}

func (opt *{{.StructName.UpperS}}Option) Select(fields ...string) *{{.StructName.UpperS}}Option {
	opt.selects = fields
	return opt
}

func (opt *{{.StructName.UpperS}}Option) SelectAll() *{{.StructName.UpperS}}Option {
	opt.selects = {{$.StructName.LowerS}}FieldAll
	return opt
}

func (opt *{{.StructName.UpperS}}Option) GetSelect() []string {
	return opt.selects
}

func (opt *{{.StructName.UpperS}}Option) OrderBy(value string) *{{.StructName.UpperS}}Option {
	opt.orders = append(opt.orders, value)
	return opt
}

func (opt *{{.StructName.UpperS}}Option) Where(query string, args ...interface{}) *{{.StructName.UpperS}}Option {
	opt.wheres = append(opt.wheres, struct {
		prefix string
		values []interface{}
	}{
		query,
		args,
	})
	return opt
}

func (opt *{{.StructName.UpperS}}Option) SetPage(pageNum, pageSize int) *{{.StructName.UpperS}}Option {
	opt.page = &struct {
		pageNum  int
		pageSize int
	}{
		pageNum,
		pageSize,
	}
	return opt
}

`
)
