// Code generated by gormgen. DO NOT EDIT.
package model

import (
	"gorm.io/gorm"
)

const (
	OrderTableName = "orders"

	orderFieldId         = "id"
	orderFieldName       = "name"
	orderFieldPrice      = "price"
	orderFieldCreateTime = "create_time"
	orderFieldUpdateTime = "update_time"
	orderFieldDeleted    = "deleted"
)

// Holds all SQL columns for order fields.
var orderFieldAll = []string{
	orderFieldId,
	orderFieldName,
	orderFieldPrice,
	orderFieldCreateTime,
	orderFieldUpdateTime,
	orderFieldDeleted,
}

// Kernel struct for table operation
type OrderOption struct {
	selects []string
	orders  []string
	wheres  []struct {
		prefix string
		values []interface{}
	}
	page *struct {
		pageNum  int
		pageSize int
	}
}

func NewOrderOption() *OrderOption {
	return &OrderOption{}
}

func (opt *OrderOption) BuildQuery(db *gorm.DB) *gorm.DB {
	if opt.selects != nil {
		db = db.Select(opt.selects)
	}
	for _, v := range opt.orders {
		db = db.Order(v)
	}
	for _, q := range opt.wheres {
		db = db.Where(q.prefix, q.values...)
	}
	return db
}

func (opt *OrderOption) BuildPage(db *gorm.DB) *gorm.DB {
	if p := opt.page; p != nil {
		if p.pageNum <= 0 {
			p.pageNum = 1
		}
		db = db.Limit(p.pageSize).Offset((p.pageNum - 1) * p.pageSize)
	}
	return db
}

func (opt *OrderOption) Select(fields ...string) *OrderOption {
	opt.selects = fields
	return opt
}

func (opt *OrderOption) SelectAll() *OrderOption {
	opt.selects = orderFieldAll
	return opt
}

func (opt *OrderOption) GetSelect() []string {
	return opt.selects
}

func (opt *OrderOption) OrderBy(value string) *OrderOption {
	opt.orders = append(opt.orders, value)
	return opt
}

func (opt *OrderOption) Where(query string, args ...interface{}) *OrderOption {
	opt.wheres = append(opt.wheres, struct {
		prefix string
		values []interface{}
	}{
		query,
		args,
	})
	return opt
}

func (opt *OrderOption) SetPage(pageNum, pageSize int) *OrderOption {
	opt.page = &struct {
		pageNum  int
		pageSize int
	}{
		pageNum,
		pageSize,
	}
	return opt
}
